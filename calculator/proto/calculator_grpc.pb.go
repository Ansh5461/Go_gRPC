// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeFindClient is the client API for PrimeFind service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeFindClient interface {
	Primes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (PrimeFind_PrimesClient, error)
}

type primeFindClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeFindClient(cc grpc.ClientConnInterface) PrimeFindClient {
	return &primeFindClient{cc}
}

func (c *primeFindClient) Primes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (PrimeFind_PrimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeFind_ServiceDesc.Streams[0], "/calculator.PrimeFind/Primes", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeFindPrimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeFind_PrimesClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type primeFindPrimesClient struct {
	grpc.ClientStream
}

func (x *primeFindPrimesClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeFindServer is the server API for PrimeFind service.
// All implementations must embed UnimplementedPrimeFindServer
// for forward compatibility
type PrimeFindServer interface {
	Primes(*PrimeRequest, PrimeFind_PrimesServer) error
	mustEmbedUnimplementedPrimeFindServer()
}

// UnimplementedPrimeFindServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeFindServer struct {
}

func (UnimplementedPrimeFindServer) Primes(*PrimeRequest, PrimeFind_PrimesServer) error {
	return status.Errorf(codes.Unimplemented, "method Primes not implemented")
}
func (UnimplementedPrimeFindServer) mustEmbedUnimplementedPrimeFindServer() {}

// UnsafePrimeFindServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeFindServer will
// result in compilation errors.
type UnsafePrimeFindServer interface {
	mustEmbedUnimplementedPrimeFindServer()
}

func RegisterPrimeFindServer(s grpc.ServiceRegistrar, srv PrimeFindServer) {
	s.RegisterService(&PrimeFind_ServiceDesc, srv)
}

func _PrimeFind_Primes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeFindServer).Primes(m, &primeFindPrimesServer{stream})
}

type PrimeFind_PrimesServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type primeFindPrimesServer struct {
	grpc.ServerStream
}

func (x *primeFindPrimesServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PrimeFind_ServiceDesc is the grpc.ServiceDesc for PrimeFind service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeFind_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.PrimeFind",
	HandlerType: (*PrimeFindServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Primes",
			Handler:       _PrimeFind_Primes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
